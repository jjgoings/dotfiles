# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

## GDV Environment
export gdvroot=/home1/gaussian/gdv/H36
. $gdvroot/gdv/bsd/gdv.profile
# load .tcshrc and gdv.login so we can use GDV
/home2/jjgoings/dotfiles/c2z -l > tmp
# warning! won't tell you if you have an error!
source tmp > /dev/null 2>&1
rm -f tmp

## G09 Environment
export g09root=/home1/gaussian/g09/D01
. $g09root/g09/bsd/g09.profile

## PGI Envirnoment
export PGI=/home1/gaussian/pgi
export LM_LICENSE_FILE=/home1/gaussian/pgi/license.dat
export PATH=/home1/gaussian/pgi/linux86-64/14.1/bin:$PATH
export PATH=/home1/gaussian/bin/autoconf-2.69/bin:$PATH
# -- GDV Environment ------------------------------------------------
#export gdvroot "/home1/gaussian/gdv/H12P"
export gdvroot="/home1/gaussian/gdv/H36"
#export gdvroot "/home1/gaussian/gdv/I03"
#export gdvroot "/home1/gaussian/gdv/I03p-linda"
#export gdvroot "/home1/gaussian/gdv/I04p"
source $gdvroot/gdv/bsd/gdv.profile
export GAUSS_MEMDEF=1000MW
export GAUSS_SCRDIR=/state/partition1
## SUBMTR Aliases
alias submit='/home2/jjgoings/bin/submtr/submtr'
alias linda='/home2/jjgoings/bin/submtr/submtr  -L'
alias serial='/home2/jjgoings/bin/submtr/submtr -S'
alias clean='/home2/jjgoings/bin/submtr/clean'
alias stat='/home2/jjgoings/bin/submtr/status'
alias plotdos='/home2/jjgoings/bin/scripts/plotDOS.exe'
alias td_analysis='/home2/jjgoings/bin/scripts/td_analysis'
alias makeD2E='/home2/jjgoings/bin/scripts/makeD2E'


## ORCA Environment
export LD_LIBRARY_PATH=/opt/openmpi/lib:$LD_LIBRARY_PATH
export orcaDIR=
export PATH=$orcaDIR:/opt/openmpi/bin:$PATH
alias orca='/orca'

# -- Default Permissions for New Files/Folders ----------------------
umask 027

# -- Link to GCC 4.9.2 Environment ----------------------------------
export PATH='/home1/gaussian/gcc/gcc-4.9.2/bin:'$PATH
export LD_LIBRARY_PATH='/home1/gaussian/gcc/gcc-4.9.2/lib:/home1/gaussian/gcc/gcc-4.9.2/lib64:'$LD_LIBRARY_PATH
export CPATH='/home1/gaussian/gcc/gcc-4.9.2/include:'$CPATH

# -- Link to Boost 1.59.0 -------------------------------------------
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH":/home1/gaussian/boost/1.59.0/stage-1_59_0/lib"
#export CPATH=$CPATH":/home1/gaussian/boost/1.59.0/include"

# -- Link to Eigen3 -------------------------------------------------
#export CPATH=$CPATH":/home1/gaussian/eigen/eigen-eigen-c58038c56923"

# -- Link to BTAS ---------------------------------------------------
#export CPATH=$CPATH":/home1/gaussian/github/BTAS"

# -- Add CMake to PATH ----------------------------------------------
export PATH=$PATH':/home1/gaussian/github/CMake/bin'

# -- Link to a local compilation of LAPACK --------------------------
#export LD_LIBRARY_PATH $LD_LIBRARY_PATH":/home1/gaussian/lapack/lib"

export HDF5_ROOT=/home1/gaussian/HDF5

# EOF

# Automatically add completion for all aliases to commands having completion functions
function alias_completion {
    local namespace="alias_completion"

    # parse function based completion definitions, where capture group 2 => function and 3 => trigger
    local compl_regex='complete( +[^ ]+)* -F ([^ ]+) ("[^"]+"|[^ ]+)'
    # parse alias definitions, where capture group 1 => trigger, 2 => command, 3 => command arguments
    local alias_regex="alias ([^=]+)='(\"[^\"]+\"|[^ ]+)(( +[^ ]+)*)'"

    # create array of function completion triggers, keeping multi-word triggers together
    eval "local completions=($(complete -p | sed -Ene "/$compl_regex/s//'\3'/p"))"
    (( ${#completions[@]} == 0 )) && return 0

    # create temporary file for wrapper functions and completions
    rm -f "/tmp/${namespace}-*.tmp" # preliminary cleanup
    local tmp_file="$(mktemp "/tmp/${namespace}-${RANDOM}XXX.tmp")" || return 1

    # read in "<alias> '<aliased command>' '<command args>'" lines from defined aliases
    local line; while read line; do
        eval "local alias_tokens=($line)" 2>/dev/null || continue # some alias arg patterns cause an eval parse error 
        local alias_name="${alias_tokens[0]}" alias_cmd="${alias_tokens[1]}" alias_args="${alias_tokens[2]# }"

        # skip aliases to pipes, boolan control structures and other command lists
        # (leveraging that eval errs out if $alias_args contains unquoted shell metacharacters)
        eval "local alias_arg_words=($alias_args)" 2>/dev/null || continue

        # skip alias if there is no completion function triggered by the aliased command
        [[ " ${completions[*]} " =~ " $alias_cmd " ]] || continue
        local new_completion="$(complete -p "$alias_cmd")"

        # create a wrapper inserting the alias arguments if any
        if [[ -n $alias_args ]]; then
            local compl_func="${new_completion/#* -F /}"; compl_func="${compl_func%% *}"
            # avoid recursive call loops by ignoring our own functions
            if [[ "${compl_func#_$namespace::}" == $compl_func ]]; then
                local compl_wrapper="_${namespace}::${alias_name}"
                    echo "function $compl_wrapper {
                        (( COMP_CWORD += ${#alias_arg_words[@]} ))
                        COMP_WORDS=($alias_cmd $alias_args \${COMP_WORDS[@]:1})
                        $compl_func
                    }" >> "$tmp_file"
                    new_completion="${new_completion/ -F $compl_func / -F $compl_wrapper }"
            fi
        fi

        # replace completion trigger by alias
        new_completion="${new_completion% *} $alias_name"
        echo "$new_completion" >> "$tmp_file"
    done < <(alias -p | sed -Ene "s/$alias_regex/\1 '\2' '\3'/p")
    source "$tmp_file" && rm -f "$tmp_file"
}; alias_completion
